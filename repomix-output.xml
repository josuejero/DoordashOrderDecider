This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
public/
  vite.svg
src/
  assets/
    react.svg
  App.css
  App.tsx
  index.css
  main.tsx
.editorconfig
.gitignore
.nvmrc
eslint.config.js
GUIDE.md
index.html
LICENSE
package.json
README.md
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="src/App.css">
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
</file>

<file path="src/App.tsx">
import { useState } from 'react'
import reactLogo from './assets/react.svg'
import viteLogo from '/vite.svg'
import './App.css'

function App() {
  const [count, setCount] = useState(0)

  return (
    <>
      <div>
        <a href="https://vite.dev" target="_blank">
          <img src={viteLogo} className="logo" alt="Vite logo" />
        </a>
        <a href="https://react.dev" target="_blank">
          <img src={reactLogo} className="logo react" alt="React logo" />
        </a>
      </div>
      <h1>Vite + React</h1>
      <div className="card">
        <button onClick={() => setCount((count) => count + 1)}>
          count is {count}
        </button>
        <p>
          Edit <code>src/App.tsx</code> and save to test HMR
        </p>
      </div>
      <p className="read-the-docs">
        Click on the Vite and React logos to learn more
      </p>
    </>
  )
}

export default App
</file>

<file path="src/index.css">
:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}
</file>

<file path="src/main.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path=".editorconfig">
root = true
</file>

<file path=".nvmrc">
20.19.0
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      js.configs.recommended,
      tseslint.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
  },
])
</file>

<file path="GUIDE.md">
This is a single, end‑to‑end, **code‑free** plan that you can follow *in order*. It includes only shell commands and file responsibilities (no app code), and merges hardening items so nothing gets lost.

---

# Step 0 — Confirm Goal & Version Pins

**Outcome:** Shared understanding of what you’re building and the versions you’ll pin to.

* **Goal:** A fast, offline‑capable PWA that decides **Accept/Reject** for DoorDash orders based on whether your *average $/hr after the order* meets your target. iPhone Shortcut launches it; no servers.
* **Pins (Oct 6, 2025):** Node 20.19+ (or 22.12+), Vite 7.x, React 19.2, @vitejs/plugin‑react 5.x, TypeScript 5.9.x, Tailwind 4.x with @tailwindcss/postcss + postcss, vite‑plugin‑pwa ≥1.0.3, Vitest ≥3.2, jsdom 27.x.

---

# Step 1 — Prepare Your System

**Purpose:** Get a reproducible toolchain.
**Commands (macOS):**

* Install Homebrew (if missing):

  * `bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"`
* Install & init nvm:

  * `brew install nvm && mkdir -p ~/.nvm`
  * (Follow `brew info nvm` to add shell lines.)
* Install Node and lock npm behavior:

  * `nvm install 20.19.0 && nvm use 20.19.0` *(or `22.12.0`)*
  * `npm config set save-exact true`
  * `node -v && npm -v`

---

# Step 2 — Create & Initialize the Repository

**Purpose:** Start clean with reproducibility and hygiene baked in.
**Commands:**

* `mkdir DoordashOrderDecider && cd DoordashOrderDecider`
* `git init -b main`
* Pin Node for collaborators: `printf "20.19.0\n" > .nvmrc`
* **Hygiene files:**

  * `.gitignore` (Node/Vite): `curl -o .gitignore https://raw.githubusercontent.com/github/gitignore/main/Node.gitignore`
  * `LICENSE` (choose your license): `printf "MIT\n" > LICENSE`
  * `.editorconfig`: `printf "root = true\n" > .editorconfig`
* Commit early: `git add -A && git commit -m "chore: repo skeleton"`

---

# Step 3 — Scaffold the App Skeleton

**Purpose:** Generate a minimal React+TS app and pin dependencies.
**Commands:**

* `npm create vite@latest . -- --template react-ts`
* Runtime deps (pin): `npm i -E react@19.2 react-dom@19.2`
* Build/test/style deps (pin):

  * `npm i -D -E vite@7 @vitejs/plugin-react@5 typescript@5.9`
  * `npm i -D -E vitest@3.2 jsdom@27`
  * `npm i -D -E tailwindcss@4 @tailwindcss/postcss postcss`
  * `npm i -D -E vite-plugin-pwa@1.0.3`
  * `npm i -D eslint prettier`
* Commit: `git add -A && git commit -m "chore: vite scaffold + pinned deps"`

---

# Step 4 — Create Baseline Files & Folders (Empty)

**Purpose:** Make all the files you’ll fill later (no app code yet).
**Commands:**

* `mkdir -p public src/lib src/components src/__tests__ tools`
* `touch tsconfig.json vite.config.ts tailwind.config.js postcss.config.js index.html`
* `touch public/ios-icon-180.png public/maskable-512.png public/robots.txt`
* `touch src/main.tsx src/App.tsx src/styles.css`
* `touch src/lib/decision.ts src/lib/storage.ts`
* `touch src/components/NumberField.tsx src/components/TimeField.tsx src/components/Card.tsx`
* `touch src/__tests__/decision.test.ts`
* *(Optional)* `touch tools/doordash_decider.py`

**(Optional quick icon placeholders if you have ImageMagick):**

* `magick -size 180x180 canvas:white public/ios-icon-180.png`
* `magick -size 512x512 canvas:white public/maskable-512.png`

Commit: `git add -A && git commit -m "chore: baseline files & dirs (empty)"`

---

# Step 5 — Configure Tooling (Still Code‑Free Content)

**Purpose:** Wire up build tools without app logic.

1. **TypeScript (`tsconfig.json`)** — strict TS for React 19 + Vite 7; JSX automatic runtime; include test types.
2. **Vite (`vite.config.ts`)** — enable @vitejs/plugin‑react and vite‑plugin‑pwa with a minimal manifest (name, short_name, start_url, display, theme/background colors, icons) and auto‑update.
3. **Tailwind (`tailwind.config.js`)** — content globs (index.html + all TS/TSX under `src`) and any theme extension.
4. **PostCSS (`postcss.config.js`)** — use `@tailwindcss/postcss` with `postcss`.
5. **Package scripts (`package.json`)** — define `dev`, `build`, `preview`, `test`, plus `lint`, `format:check`, `format`.

Commit: `git add -A && git commit -m "chore: configure TS/Vite/Tailwind/PostCSS + scripts"`

---

# Step 6 — App Shell & Public Assets

**Purpose:** Prepare the outer shell and docs.

1. **`index.html`** — SPA mount point and icon/meta references (no app code).
2. **`public/`** — ensure icons exist and sizes match manifest; include `robots.txt`.
3. **`README.md`** — document the rule, how to install/run/test/build/deploy, iOS PWA install flow, limits (no push‑notification trigger), and pinned versions.

Commit: `git add -A && git commit -m "docs: index.html shell + public assets + README"`

---

# Step 7 — Source Structure (Responsibilities Only)

**Purpose:** Describe what each source file will do when you add app code later.

* **`src/main.tsx`** — bootstrap only (imports styles, renders root). No business logic.
* **`src/styles.css`** — Tailwind entry + minimal global resets.
* **`src/App.tsx`** — single‑screen calculator UI:

  * Inputs: Target $/hr, Shift start (HH:MM), Earned so far, Offered payout, Finish (HH:MM), optional Miles, Cost/mi, Buffer minutes.
  * Decision card: ACCEPT/REJECT, required ≥ $, offered/net $, projected averages, friendly finish ETA.
  * Actions: “I accepted” (adds net to earned; nudges default finish forward), “Reset offer”.
  * URL params: allow `payout`, `finish`, `miles`, `cpm` for Shortcut prefill.
  * Delegates math to `lib/decision`; persistence via `lib/storage`.
* **`src/lib/decision.ts`** — pure math engine (no UI/IO/storage):

  * Inputs (above); compute elapsed since start, now→finish (assume next day if finish ≤ now), required payout (clamped ≥ 0), net payout, accept boolean, projected averages (gross/net).
* **`src/lib/storage.ts`** — localStorage load/save of `{ targetRate, shiftStartHHMM, earnedSoFar, costPerMile }`, tolerant of empty/malformed data.
* **Components** — `Card.tsx` (layout), `NumberField.tsx` (labeled number input), `TimeField.tsx` (labeled time input HH:MM).
* **Tests** — `src/__tests__/decision.test.ts` to cover: behind‑pace, ahead‑of‑pace (required < 0 ⇒ treat as 0 in decision), midnight crossover, buffer impact, net vs gross acceptance flip.

Commit (structure notes / stubs only): `git add -A && git commit -m "docs: source responsibilities (no app code)"`

---

# Step 8 — Linting & Formatting

**Purpose:** Keep every commit clean and consistent.
**Commands:**

* `npm i -D eslint prettier`
* Add npm scripts for `lint`, `format:check`, `format`.
* Run checks:

  * `npx eslint . --ext .ts,.tsx`
  * `npx prettier --check .`
  * `npx prettier --write .`

Commit: `git add -A && git commit -m "chore: eslint + prettier setup"`

---

# Step 9 — PWA Completeness & Quality Gates

**Purpose:** Ensure installability, updates, and offline resilience.

* **Manifest extras:** add `id`, `scope`, `categories`, `shortcuts`, `screenshots`, `orientation`, and a fuller icon set (multiple sizes).
* **Service worker UX:** add an update flow ("update available → refresh"), an offline fallback, and a clear caching strategy (precache app shell; runtime cache icons/fonts).
* Keep plugin current: `npm i -D -E vite-plugin-pwa@1.0.3`
* Local prod preview: `npm run preview`
* Optional PWA audit: `npm i -D @lhci/cli && npx lhci autorun`

Commit: `git add -A && git commit -m "feat(pwa): manifest extras + sw ux + audits"`

---

# Step 10 — Validation, Time/Currency Rigor, and Guardrails

**Purpose:** Prevent bad inputs and keep math trustworthy.

* **Validation:** disallow negative miles; constrain buffer minutes; require key fields.
* **Errors:** friendly messages for unparsable finish time; provide a **Reset all** action.
* **Currency:** use integer cents internally; format with device locale for UI.
* **Time/DST:** rely on device local time; show **date** when finish crosses midnight.
* **12/24‑hour consistency:** document HH:MM everywhere (and in Shortcut prefill).

Commit: `git add -A && git commit -m "feat: input validation + time/currency rigor"`

---

# Step 11 — Local Dev, Tests, and Quality Loops

**Purpose:** Prove the app works the way you expect.
**Commands:**

* Start dev server: `npm run dev`
* Build for prod: `npm run build`
* Preview prod build: `npm run preview`
* Unit tests (watch): `npx vitest`
* Coverage run: `npx vitest run --coverage`

Commit after green runs: `git add -A && git commit -m "test: unit coverage pass"`

---

# Step 12 — GitHub Setup & First Push

**Purpose:** Move work to remote and keep it stable.
**Commands:**

* First full commit already done; push to a new repo:

  * With GitHub CLI: `gh repo create DoordashOrderDecider --public --source=. --remote=origin --push`
  * Or manual: `git remote add origin <url> && git push -u origin main`

---

# Step 13 — iPhone Integration

**Purpose:** Make it fast to trigger during a dash.

* **Install PWA on iOS:** Safari → open your deployed URL → **Share → Add to Home Screen**.
* **Shortcut (prefill & one‑tap):** create **Order Decider** that opens your deployed URL with `payout`, `finish`, `miles`, `cpm` query params. Map to **Back Tap**, **Action Button** (15 Pro/Max), or Apple Watch.
* **Automation:** Shortcuts → **Automation → App** → *When DoorDash is Opened* → **Run: Order Decider** (disable "Ask Before Running" if available).

---

# Step 14 — Deploy

**Purpose:** Share it publicly and test on real devices.
**Vercel Commands:**

* `npm i -g vercel`
* `vercel` (link project; follow prompts)
* `vercel deploy --prod`

**Netlify Commands:**

* `npm i -g netlify-cli`
* `ntl init`
* `ntl deploy --build` (preview)
* `ntl deploy --prod --dir=dist`

---

# Step 15 — Verify & QA

**Purpose:** Ensure a reliable, installable, offline experience.
**Commands:**

* `npm run preview` then open Chrome DevTools → **Application** → confirm **Manifest** and **Service Worker**.
* (Optional) `npx lhci autorun` against the preview server.

**Manual QA checklist:**

* Decision updates live as inputs change.
* “I accepted” updates earned‑so‑far and preserves defaults.
* Required can be negative when ahead; still yields **ACCEPT**.
* Finish earlier than now is treated as next day.
* PWA installs and works offline.
* Shortcut opens PWA with prefilled values.
* “App opened: DoorDash → run Shortcut” works; no push‑notification auto‑trigger expected.

---

# Step 16 — Dependency Guardrails & Maintenance

**Purpose:** Stay on safe major versions and keep CI reproducible.

* Confirm pins (Node 20/22, Vite 7, React 19.2, Tailwind 4, Vitest ≥3.2, jsdom 27).
* Commit and rely on the lockfile; in CI use `npm ci`.
* Add **Dependabot** or **Renovate** to keep within these major lines.
* (Optional) Add CI workflow that runs: setup‑node → `npm ci` → lint → test → build (and optionally Lighthouse CI).

---

# You’re Done

You now have a single ordered plan from blank folder → reproducible repo → scaffold → PWA‑complete app shell → validated inputs/time/currency rigor → tests → deploy → iPhone integration → audits → maintenance. No application code is included here; just file responsibilities and the shell commands to move through each phase.
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>doordashorderdecider</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="LICENSE">
MIT
</file>

<file path="package.json">
{
  "name": "doordashorderdecider",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^19.1.1",
    "react-dom": "^19.1.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.36.0",
    "@tailwindcss/postcss": "4.1.14",
    "@types/node": "^24.6.0",
    "@types/react": "^19.1.16",
    "@types/react-dom": "^19.1.9",
    "@vitejs/plugin-react": "^5.0.4",
    "eslint": "9.37.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.22",
    "globals": "^16.4.0",
    "jsdom": "27.0.0",
    "postcss": "8.5.6",
    "prettier": "3.6.2",
    "tailwindcss": "4.1.14",
    "typescript": "~5.9.3",
    "typescript-eslint": "^8.45.0",
    "vite": "^7.1.7",
    "vite-plugin-pwa": "1.0.3",
    "vitest": "3.2.4"
  }
}
</file>

<file path="README.md">
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) (or [oxc](https://oxc.rs) when used in [rolldown-vite](https://vite.dev/guide/rolldown)) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## React Compiler

The React Compiler is not enabled on this template because of its impact on dev & build performances. To add it, see [this documentation](https://react.dev/learn/react-compiler/installation).

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...

      // Remove tseslint.configs.recommended and replace with this
      tseslint.configs.recommendedTypeChecked,
      // Alternatively, use this for stricter rules
      tseslint.configs.strictTypeChecked,
      // Optionally, add this for stylistic rules
      tseslint.configs.stylisticTypeChecked,

      // Other configs...
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...
      // Enable lint rules for React
      reactX.configs['recommended-typescript'],
      // Enable lint rules for React DOM
      reactDom.configs.recommended,
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2022",
    "useDefineForClassFields": true,
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "types": ["vite/client"],
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2023",
    "lib": ["ES2023"],
    "module": "ESNext",
    "types": ["node"],
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

</files>
